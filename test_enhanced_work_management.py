#!/usr/bin/env python
"""
Test enhanced work management features
"""
import os
import sys
import django
from datetime import date, timedelta

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'carmodx.settings')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from services.models import Service, ServiceCategory
from appointments.models import Appointment

User = get_user_model()

def test_enhanced_work_management():
    print("Testing Enhanced Work Management Features")
    print("=" * 60)
    
    # Create test data
    print("1. Setting up enhanced test scenario...")
    
    # Create service
    category, created = ServiceCategory.objects.get_or_create(
        name="Enhanced Work Test",
        defaults={'description': 'Enhanced work test category'}
    )
    
    service, created = Service.objects.get_or_create(
        name="Enhanced Work Service",
        defaults={
            'description': 'Service for testing enhanced work management',
            'category': category,
            'base_price': 30000.00,
            'estimated_duration': timedelta(hours=3)
        }
    )
    
    # Create employee
    employee, created = User.objects.get_or_create(
        username="enhancedemployee",
        defaults={
            'email': 'enhanced@test.com',
            'first_name': 'Enhanced',
            'last_name': 'Employee',
            'role': 'employee',
            'is_staff': True
        }
    )
    if created:
        employee.set_password('testpass123')
        employee.save()
    
    # Create customer and appointment
    customer, created = User.objects.get_or_create(
        username="enhancedcustomer",
        defaults={
            'email': 'enhancedcustomer@test.com',
            'role': 'customer'
        }
    )
    
    # Clean up existing appointments
    Appointment.objects.filter(customer=customer).delete()
    
    appointment = Appointment.objects.create(
        customer=customer,
        selected_service=service,
        slot_date=date.today() + timedelta(days=1),
        slot_time='13:00',
        status='booked',
        priority='high',
        vehicle_make='Enhanced',
        vehicle_model='Test',
        vehicle_year=2024,
        vehicle_license='ENH-789',
        special_requirements='High priority work - customer VIP'
    )
    
    print(f"   - Employee: {employee.username}")
    print(f"   - Work: #{appointment.id} - {service.name}")
    print(f"   - Priority: {appointment.get_priority_display()}")
    print(f"   - Status: {appointment.get_status_display()}")
    
    client = Client()
    client.login(username='enhancedemployee', password='testpass123')
    
    # Test 1: Employee sees enhanced dashboard
    print(f"\n2. Testing Enhanced Dashboard...")
    
    response = client.get('/accounts/dashboard/', follow=True)
    if response.status_code == 200:
        print("   âœ“ Enhanced dashboard loaded")
        if b"My Active Work" in response.content:
            print("   âœ“ Shows 'My Active Work' section")
        if b"Available Work" in response.content:
            print("   âœ“ Shows 'Available Work' section")
        if b"Pick Up Work" in response.content:
            print("   âœ“ Shows 'Pick Up Work' buttons")
    
    # Test 2: Self-assignment workflow
    print(f"\n3. Testing Self-Assignment Workflow...")
    
    response = client.get(f'/appointments/{appointment.id}/update-status/')
    if response.status_code == 200:
        print("   âœ“ Work management page accessible")
        if b"Assign to Me" in response.content:
            print("   âœ“ Self-assignment button visible")
        
        # Assign work to self
        response = client.post(f'/appointments/{appointment.id}/update-status/', {
            'action': 'assign_self'
        })
        
        if response.status_code in [200, 302]:
            appointment.refresh_from_db()
            if appointment.assigned_employee == employee and appointment.status == 'assigned':
                print("   âœ“ Successfully assigned work to self")
                print(f"     - Status: {appointment.get_status_display()}")
                print(f"     - Assigned to: {appointment.assigned_employee.username}")
            else:
                print("   âœ— Self-assignment failed")
        else:
            print(f"   âœ— Self-assignment request failed: {response.status_code}")
    
    # Test 3: Start work workflow
    print(f"\n4. Testing Start Work Workflow...")
    
    response = client.get(f'/appointments/{appointment.id}/update-status/')
    if response.status_code == 200:
        if b"Start Work" in response.content:
            print("   âœ“ Start Work button visible")
            
            # Start work
            response = client.post(f'/appointments/{appointment.id}/update-status/', {
                'action': 'start_work'
            })
            
            if response.status_code in [200, 302]:
                appointment.refresh_from_db()
                if appointment.status == 'in_progress' and appointment.work_started_at:
                    print("   âœ“ Work started successfully")
                    print(f"     - Status: {appointment.get_status_display()}")
                    print(f"     - Started at: {appointment.work_started_at.strftime('%H:%M')}")
                    if appointment.estimated_completion:
                        print(f"     - Est. completion: {appointment.estimated_completion.strftime('%H:%M')}")
                else:
                    print("   âœ— Start work failed")
            else:
                print(f"   âœ— Start work request failed: {response.status_code}")
    
    # Test 4: Complete work workflow
    print(f"\n5. Testing Complete Work Workflow...")
    
    response = client.get(f'/appointments/{appointment.id}/update-status/')
    if response.status_code == 200:
        if b"Mark as Completed" in response.content:
            print("   âœ“ Complete Work section visible")
            
            # Complete work with notes
            response = client.post(f'/appointments/{appointment.id}/update-status/', {
                'action': 'complete_work',
                'work_notes': 'Work completed successfully. Customer was very satisfied with the service quality.'
            })
            
            if response.status_code in [200, 302]:
                appointment.refresh_from_db()
                if appointment.status == 'completed' and appointment.work_completed_at:
                    print("   âœ“ Work completed successfully")
                    print(f"     - Status: {appointment.get_status_display()}")
                    print(f"     - Completed at: {appointment.work_completed_at.strftime('%H:%M')}")
                    if appointment.work_notes:
                        print(f"     - Work notes: {appointment.work_notes[:50]}...")
                    
                    # Calculate work duration
                    duration = appointment.get_work_duration()
                    if duration:
                        print(f"     - Work duration: {duration}")
                else:
                    print("   âœ— Complete work failed")
            else:
                print(f"   âœ— Complete work request failed: {response.status_code}")
    
    # Test 5: Priority and status management
    print(f"\n6. Testing Priority and Status Management...")
    
    # Create another appointment to test priority changes
    appointment2 = Appointment.objects.create(
        customer=customer,
        selected_service=service,
        slot_date=date.today() + timedelta(days=2),
        slot_time='15:00',
        status='booked',
        priority='normal',
        vehicle_make='Priority',
        vehicle_model='Test',
        vehicle_year=2024,
        vehicle_license='PRI-456'
    )
    
    response = client.post(f'/appointments/{appointment2.id}/update-status/', {
        'action': 'update_status',
        'status': 'assigned',
        'priority': 'urgent',
        'work_notes': 'Priority escalated to urgent due to customer request'
    })
    
    if response.status_code in [200, 302]:
        appointment2.refresh_from_db()
        if appointment2.priority == 'urgent':
            print("   âœ“ Priority updated successfully")
            print(f"     - New priority: {appointment2.get_priority_display()}")
            print(f"     - Priority color: {appointment2.get_priority_color()}")
        else:
            print("   âœ— Priority update failed")
    
    # Test 6: Dashboard updates
    print(f"\n7. Testing Dashboard Updates...")
    
    response = client.get('/accounts/dashboard/', follow=True)
    if response.status_code == 200:
        print("   âœ“ Dashboard reflects work changes")
        # Should show completed work in statistics
        if b"Completed Today" in response.content:
            print("   âœ“ Shows completed work statistics")
        if b"My Active Work" in response.content:
            print("   âœ“ Shows active work section")
    
    client.logout()
    
    print("\n" + "=" * 60)
    print("ENHANCED WORK MANAGEMENT TEST RESULTS")
    print("=" * 60)
    
    print(f"\nðŸŽ¯ Enhanced Features Tested:")
    print(f"   1. âœ… Self-assignment workflow")
    print(f"   2. âœ… Start work with time tracking")
    print(f"   3. âœ… Complete work with notes")
    print(f"   4. âœ… Priority management")
    print(f"   5. âœ… Status transitions")
    print(f"   6. âœ… Work duration tracking")
    print(f"   7. âœ… Enhanced dashboard statistics")
    
    print(f"\nðŸ”§ New Employee Capabilities:")
    print(f"   - Self-assign available work")
    print(f"   - Track work start/completion times")
    print(f"   - Add work progress notes")
    print(f"   - Manage work priorities")
    print(f"   - View work duration statistics")
    print(f"   - See available work to pick up")
    print(f"   - Monitor urgent work items")
    
    print(f"\nðŸ“Š Enhanced Status Flow:")
    print(f"   Booked â†’ Assigned â†’ In Progress â†’ Completed")
    print(f"   (with optional On Hold and Cancelled states)")
    
    print(f"\nâœ… Enhanced work management test completed successfully!")

if __name__ == "__main__":
    test_enhanced_work_management()